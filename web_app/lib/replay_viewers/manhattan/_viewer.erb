<%= javascript_include_tag 'cdn/jquery.min', 'cdn/jquery-ui.min' %>
<%= stylesheet_link_tag "jquery-ui/jquery-ui", stylesheet_path+"/viewer.css" %>

<head><title>Manhattan Viewer</title></head>

<body>	
        <div id="container"> 
          <div id="score">
                  <span id="score1" class="player player1">0</span> : <span id="score2" class="player player2">0</span><br/>
                  <span id="round">Runde 0</span>
          </div>
          
          <div id="playerinfos1">
              <div><span id="name1">Rot</span> <span id="current_red_points"></span></div>
              <div style="display:none" class"highest_tower" id="highest_tower_red">Höchster Turm im Besitz (3 Punkte)</div>
              <div id="red_towers"><span id="red_towers_count"></span> Türme im Spiel (<span id="red_towers_score"></span> Punkte)</div>
              <div id="red_cities"><span id="red_cities_count"></span> Städte im Besitz (<span id="red_cities_score"></span> Punkte)</div>
          </div>
          
          <div id="playerinfos2">
              <div><span id="name2">Blau</span> <span id="current_blue_points"></span></div>
              <div style="display:none" class"highest_tower" id="highest_tower_blue">Höchster Turm im Besitz (3 Punkte)</div>
              <div id="blue_towers"><span id="blue_towers_count"></span> Türme im Spiel (<span id="blue_towers_score"></span> Punkte)</div>
              <div id="blue_cities"><span id="blue_cities_count"></span> Städte im Besitz (<span id="blue_cities_score"></span> Punkte)</div>
          </div>
        </div>

        <div id="select"></div>

        <div id="board">
            <% ["manhattan","frankfurt","hongkong","dubai"].each_with_index do |e,i| %>
              <div id="city_<%=i%>" name="<%= e %>" class="city">
                <% (0..4).each do |s| %>
                  <div class="tower" size="0" slot="<%= s %>" style="bottom: <%= s * 30 %>px; left: <%= s * 27 %>px; z-index:<%= 400 - s*100 %>; width: 43px;"><%= image_tag "#{image_path}/empty_slot.png", :style => "position:absolute; z-index:#{400 - s*100}; bottom: 0px; left: 0px;;" %></div>
                <% end %>
                <div class="city_name"><%= ["Manhattan","Frankfurt","Hong Kong","Dubai"][i] %></div>
              </div>
            <% end %>
        </div>

        <div id="blue_cards"></div>
        <div id="red_cards"></div>
        <div id="blue_segments" class="segments"></div>
        <div id="red_segments" class="segments"></div>

        <div id="slider"></div>
	
        <div id="buttons">
                <button id="firstButton" onclick="firstButtonClick()"><img src="<%=image_path%>/go-first.png" /></button>
		<button id="prevButton" onclick="prevButtonClick()"><img src="<%=image_path%>/prev.png" /></button>
		<button id="playButton" onclick="playButtonClick()"><img src="<%=image_path%>/play.png" /></button>
                <button id="nextButton" onclick="nextButtonClick()"><img src="<%=image_path%>/next.png" /></button>
                <button id="lastButton" onclick="lastButtonClick()"><img src="<%=image_path%>/go-last.png" /></button>
	</div>
        
        <div id="result">
          <div id="winner"></div>
          <table id="results" >
             <tr id="result_names"> </tr>
             <tr id="results_0" class="player1"> </tr>
             <tr id="results_1" class="player2"> </tr>
          </table>
        </div>
</body>

<script language="JavaScript">

var replayURL = "<%= replay_url %>";
var turnXMLs; // The turns
var displayNames; // The names of the players: [player0,player1]
var xml; // The xml answer
var currentTurn = 0; // The current loaded turn
var lastTurn; // The last turn is the game
var numTurns; // number of turns
var interval; // interval-timer for play-mode
var isPlaying = <%= autoplay %>;
var ignoreChange = false; 
var tweenDict = {};

// Translate the board[x,y] to the coords on the board!

  function translate(x,y,width,height){
   return [x(x,width),y(y,hight)]
  }
  function x(index, width) {
   return index*20 - Math.floor(width / 2);
  }
  function y(index, height) {	
   return index*20 - Math.floor(height / 2);
  }


function createAjaxRequest() {
	try { return new XMLHttpRequest(); } catch(e) {}
	try { return new ActiveXObject("Msxml2.XMLHTTP"); } catch(e) {}
	try { return new ActiveXObject("Microsoft.XMLHTTP"); } catch(e) {}
	return null;
}

// Create the request and load informations from xml
var req = createAjaxRequest();
req.open("GET", replayURL, true);
req.setRequestHeader("Content-Type", "text/xml");
req.onreadystatechange = function() {
  if (req.responseXML == null || req.readyState != 4) return;
  xml = req.responseXML
  turnXMLs = xml.getElementsByTagName("state");
  numTurns = turnXMLs.length;
  lastTurn = numTurns-1
	
  // create names
  displayNames = [turnXMLs[0].getElementsByTagName("red")[0].getAttribute("displayName"),
                turnXMLs[1].getElementsByTagName("blue")[0].getAttribute("displayName")] 
  $("#name1").html(displayNames[0]); 
  $("#name2").html(displayNames[1]);

  // create Results
  createResults()
  hideResults()

  // create the slider
  $("#slider").slider({
    min: 0,
    max: lastTurn,
    value: 0,
    slide: function(e,ui){
      if(ignoreChange) return;
      if(isPlaying) stop();
      setTurn(ui.value);
    }
  })

  // render the first turn!
  renderTurn(turnXMLs[0]);
	
}
req.send(null);


function createResults(){   
  var scores = xml.getElementsByTagName("score")
  for(var player = 0; player < scores.length; player++){
    
    // Display the reason and if any player was disqualified
    var scoreCause = scores[player].getAttribute("cause")
    if(scoreCause != "REGULAR"){
      var message = '<div class="disqualification">'
      message += displayNames[player]
      <% I18n.t("games.causes").each do |k,v| %>
        if(scoreCause == "<%= k.to_s %>"){
          message += " wurde disqualifiziert: <%= v %> </div>"
        }
      <% end %>
       $("#result").append(message)
     }
     
     // Put score-values into score-table
     var parts = scores[player].getElementsByTagName("part")
     for(var i = 0; i < parts.length; i++){
       $("#results_"+player).append("<td>"+parts[i].textContent+"</td>")
     }
  }
   
  // Display the names of the fragments and if are relevant
  var fragments = xml.getElementsByTagName("fragment")
  for(var i = 0; i < fragments.length; i++){
    $("#result_names").append("<td>"+fragments[i].getAttribute("name")+"</td>")
    if (fragments[i].getElementsByTagName("relevantForRanking")[0].textContent == "true"){
      $("#result_0, #result_1, #result_names").children().eq(i).addClass("relevantForRanking")
    }
  } 
 
  var winner = xml.getElementsByTagName("winner")[0].getAttribute("displayName")
  $("#winner").html("Das Spiel endet, der Gewinner ist: "+winner)
}

function hideResults(){
  $("#result").hide()
 // $("#playerinfos1, #playerinfos2").show()
}

function showResults(){
  $("#result").show()
//  $("#playerinfos1, #playerinfos2").hide()
}

function playButtonClick() {	
  if (isPlaying){
    stop();	
  }else{
    if (currentTurn == lastTurn) setTurn(0);
    else play();
  }
}

function firstButtonClick(){
  if (isPlaying) stop();
  setTurn(0);
}

function lastButtonClick(){
  if (isPlaying) stop();
  setTurn(lastTurn);
}

function prevButtonClick() {
  if (isPlaying) stop();
  setTurn(currentTurn-1);
}
function nextButtonClick() {
  if (isPlaying) stop();
  setTurn(currentTurn+1);
}

function play() {
  isPlaying = true;
  setPlayButton("pause");
  nextTurn();
  interval = setInterval(nextTurn, 2500);
}
function stop() {
  clearInterval(interval);
  isPlaying = false;
  setPlayButton("play");
}

function nextTurn() {
  setTurn(currentTurn+1);
}

// Sets the image of the play button to val.png
function setPlayButton(val) {
  $("#playButton img").attr("src", "<%=image_path%>/"+val+".png")
}

function setTurn(newTurn) {
  if (newTurn < 0 || newTurn >= numTurns) return;
  var prevTurn = currentTurn;
  currentTurn = newTurn;
  if (currentTurn == lastTurn) {
    if (isPlaying) stop();
    setPlayButton("reset");
  }else{
    hideResults()
    if (isPlaying){
      setPlayButton("pause");
    }else{
      setPlayButton("play");	
    }
  }
  try {
    ignoreChange = true;
    $("#slider").slider("option","value",currentTurn);
    ignoreChange = false;
  } catch(e) {}
  renderTurn(turnXMLs[currentTurn],prevTurn);
  $("#round").html("Runde "+Math.floor((currentTurn/2)+(currentTurn%2)))
        
  // Render Results on top if the replay is ended
  if (currentTurn == lastTurn){
    showResults()
  }
}

function renderTurn(turnXML, last_turn_nr) {
    var towers = turnXML.getElementsByTagName("tower")
    if(last_turn_nr == (currentTurn - 1) || last_turn_nr == (currentTurn + 1)){
      var move;
      if(last_turn_nr == (currentTurn - 1)) move = turnXML.getElementsByTagName("move")[0];
      if(last_turn_nr == (currentTurn + 1)) move = turnXMLs[currentTurn + 1].getElementsByTagName("move")[0];
      var type = move.getAttribute("type");
      if(type == "select"){
        // TODO: show selecting dialog
      }else if(type == "build"){
        var city = move.getAttribute("city");
        var slot = move.getAttribute("slot");
        if(last_turn_nr == (currentTurn - 1)){
          animateMove(turnXML.getAttribute("current") == "red" ? "blue" : "red",move)
          return; // all other stuff is done in animation callback is done in callback
        }
        refreshTower(city,slot)
      }
    }else{
      var tower_data_received = [[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0]];
      for(var i = 0; i < towers.length; i++){
        tower_data_received[parseInt(towers[i].getAttribute("city"))][parseInt(towers[i].getAttribute("slot"))] = 1;
        buildTower(towers[i]);
      }
      for(var i = 0; i < tower_data_received.length; i++){
        for(var j = 0; j < tower_data_received[i].length; j++){
          if(tower_data_received[i][j] == 0){
            setEmptySlot(i,j);
          }
        }
      }
    }
    refreshHud(turnXML.getElementsByTagName("blue")[0]);
    refreshHud(turnXML.getElementsByTagName("red")[0]);
    refreshScores(turnXML);
}

function refreshScores(turnXML){
  var highest_tower = 0;
  var highest_owner;
  var ownage_map = [[0,0],[0,0],[0,0],[0,0]];
  var towers = turnXML.getElementsByTagName("tower");
  var city;
  var height;
  var tower;
  var owner;
  for(var i = 0; i < towers.length; i++){
    tower = towers[i];
    city = parseInt(tower.getAttribute("city"));
    owner = tower.getAttribute("owner");
    height = parseInt(tower.getAttribute("red"))+parseInt(tower.getAttribute("blue"));
    ownage_map[city][owner == "red" ? 0 : 1] = (ownage_map[city][owner == "red" ? 0 : 1] + 1);
    if(height > highest_tower){
      highest_tower = height;
      highest_owner = owner;
    }
  }
  var red_towers = 0;
  var blue_towers = 0;
  var blue_cities = 0;
  var red_cities = 0;
  var city;

  for(var i = 0; i < ownage_map.length; i++){
    red_towers += ownage_map[i][0];
    blue_towers += ownage_map[i][1];
    city = $(".city_name:eq("+i+")");
    if(ownage_map[i][0] > ownage_map[i][1]){
      red_cities++;
      city.css('color',"#ff3c3c");
    }else if(ownage_map[i][1] > ownage_map[i][0]){
      blue_cities++;
      city.css("color", "#5050ff");
    }else{
      city.css("color", "#808080");
    }
  }

    $("#blue_cities_count").html(blue_cities);
    $("#blue_cities_score").html(blue_cities*2);

    $("#red_cities_count").html(red_cities);
    $("#red_cities_score").html(red_cities*2);

    $("#red_towers_count").html(red_towers);
    $("#red_towers_score").html(red_towers);

    $("#blue_towers_count").html(blue_towers);
    $("#blue_towers_score").html(blue_towers);

    var current_blue_points = blue_cities*2 + blue_towers + (highest_owner == "blue" ? 3 : 0)
    var current_red_points = red_cities*2 + red_towers + (highest_owner == "red" ? 3 : 0)
    
    if(current_red_points >= 1){
      $("#current_red_points").html("(+"+current_red_points+")");
    }else{
      $("#current_red_points").html("");
    }

    if(current_blue_points >= 1){
      $("#current_blue_points").html("(+"+current_blue_points+")");
    }else{
      $("#current_blue_points").html("");
    }

  if(highest_tower){
    $("#highest_tower_"+(highest_owner == "red" ? "blue" : "red")).hide();
    $("#highest_tower_"+highest_owner).show();
  }

  $("#score1").html(turnXML.getElementsByTagName("red")[0].getAttribute("points"));
  $("#score2").html(turnXML.getElementsByTagName("blue")[0].getAttribute("points"));
}

function refreshTower(city,slot){
  var towers = turnXMLs[currentTurn].getElementsByTagName("tower");
  var found_tower = false; 
  for(var i = 0; i < towers.length; i++){
    if(towers[i].getAttribute("city") == city && towers[i].getAttribute("slot") == slot){
      found_tower = true;
      buildTower(towers[i])
    }
  }
  if(!found_tower){
    setEmptySlot(city,slot);
  }
}



function buildTower(tower) { 
    var slot_nr = tower.getAttribute("slot");
    var slot = $("#city_"+tower.getAttribute("city")+" .tower[slot='"+slot_nr+"']");
    var owner = tower.getAttribute("owner");
    var red = parseInt(tower.getAttribute("red"));
    var blue = parseInt(tower.getAttribute("blue"));
    var pos = slot.position();
    var z = parseInt(slot.css('z-index'));
    var current_element = 0;
    var elements = ""
    var not_owner = (owner == "red" ? "blue" : "red")
    for(var i = 0; i < eval(not_owner); i++){
      elements += towerElement(not_owner,current_element,z);
      current_element += 1;
    }

    for(var i = 0; i < eval(owner); i++){
      elements += towerElement(owner,current_element,z);
      current_element += 1;
    }
    elements += "<div class='segment_counter'>"+(red+blue)+"</div>";
    slot.html(elements) 

    slot.css('height', ((red+blue)*16+25)+"px")
    slot.attr("size", red+blue)
}

function towerElement(player,i,slot_z){
  return "<img class='element' style='z-index:"+slot_z+i+"; bottom:"+(16*i)+";' src='<%= image_path %>/element_"+player+".png' />";
}

function refreshHud(player){
  refreshCards(player);
  refreshSegmentStorage(player);
}

function refreshCards(player){
  var cards = player.getElementsByTagName("card")
  var cardElements = ""
  for(var i = 0; i < cards.length; i++){
    cardElements += "<img class='card' src='<%= image_path %>/card_"+cards[i].getAttribute("slot")+".png' />";
  }
  $("#"+player.tagName+"_cards").html(cardElements)
}

function refreshSegmentStorage(player){
  var segments = player.getElementsByTagName("segment")
  var segments_html = "";
  var segment_count = 0;
  for(var i = 0; i < segments.length; i++){
    var segment;
    if(player.tagName == "blue"){ 
      segment = segments[i];
    }else{
      segment = segments[segments.length - (i + 1)];
    }
    var s_size = parseInt(segment.getAttribute("size"));
    var usable = parseInt(segment.getAttribute("usable"));
    for(var k = usable; k > 0; k--){
      var top_coord = 605-(s_size*16 + 25);
      var left_coord = (player.tagName == "red" ? 10 : 515);
      segments_html += "<div class='segment segment_"+s_size+"' style='width:43px; height:"+((16*s_size)+25)+"px; position: absolute; left:"+((segment_count*46)+left_coord)+"px; top:"+top_coord+"px;'>";
      for(var j = 0; j < s_size; j++){
        segments_html += towerElement(player.tagName, j, 0);
      }
      segments_html += "</div>"
      segment_count++;
    }
  }
  $("#"+player.tagName+"_segments").html(segments_html);
}

function animateMove(player,move){
  var move_size = parseInt(move.getAttribute("size"))
  var move_slot = parseInt(move.getAttribute("slot"))
  var seg = $("#"+player+"_segments .segment_"+move_size+":first");
  var city = $("#city_"+move.getAttribute("city"));
  var tower = $("#city_"+move.getAttribute("city")+" .tower[slot='"+move_slot+"']");
  var tower_size = parseInt(tower.attr("size"));
  var endX = city.position().left;
  var endY = city.position().top;
  endX += tower.position().left;
  endY -= 30*move_slot;
  endY -= ((tower_size+move_size)*16 + 25 );
  endY += 5;
  endX += 5;
  seg.css("z-index", 40000);//(4 - move_slot)*1000+tower_size+1);
  seg.animate({left : endX,top : endY}, function(){
    refreshTower(move.getAttribute("city"),move.getAttribute("slot"));
    refreshHud(turnXMLs[currentTurn].getElementsByTagName("blue")[0]);
    refreshHud(turnXMLs[currentTurn].getElementsByTagName("red")[0]);
    refreshScores(turnXMLs[currentTurn])
  })
}

function setEmptySlot(city,slot){
  var slot = $("#city_"+city+" .tower[slot='"+slot+"']");
  slot.html('<img src="<%= image_path %>/empty_slot.png", style="position:absolute; z-index:'+(400 - parseInt(slot)*100)+'; bottom: 0px; left: 0px;" />');
  slot.attr("size","0");
}

</script>
